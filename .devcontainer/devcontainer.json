// see https://aka.ms/devcontainer.json ==> https://containers.dev/implementors/json_reference/
{
  "name": "Enola.dev's Dev Containers.dev",

  // TODO https://containers.dev/guide/prebuild
  // with https://github.com/marketplace/actions/dev-container-build-and-run-action

  // This is the "fat" container with a lot of ready tools
  // from https://github.com/devcontainers/images/tree/main/src/universal
  "image": "mcr.microsoft.com/devcontainers/universal:2-linux",

  // TODO https://containers.dev/guide/dockerfile
  // "build": {
  //  // Path is relative to the devcontainer.json file.
  //   "dockerfile": "../Dockerfile-DevEnv"
  // }

  // https://containers.dev/implementors/json_reference/#lifecycle-scripts
  // is what you want, NOT features' "ghcr.io/devcontainers-contrib/features/bash-command:1"
  // (because that doesn't seem to have access to the workspace, whereas this does)
  //
  // TODO Rethink if we want this? It seems like a dumb idea now, as it (considerably)
  // slows down the "Setting up your workspace"... better let the developer pop into
  // a work Web IDE ASAP - and then let them manually run this in it.
  // "onCreateCommand": "/workspaces/enola/test.bash",
  "onCreateCommand": "/workspaces/enola/tools/sdkman/java-21.bash",

  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {
    // Do *NOT* add anything here; all tools are always only installed
    // via https://asdf-vm.com from //.tool-versions!
  },

  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [],

  // Configure tool-specific properties.
  // "customizations": {},

  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
  // "remoteUser": "root"

  "hostRequirements": {
    "cpus": 16
  }
}
