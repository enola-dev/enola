// see https://aka.ms/devcontainer.json ==> https://containers.dev/implementors/json_reference/
{
  "name": "Enola.dev's Dev Containers.dev",

  // TODO https://containers.dev/guide/prebuild
  // with https://github.com/marketplace/actions/dev-container-build-and-run-action

  // This is the "fat" container with a lot of ready tools
  // from https://github.com/devcontainers/images/tree/main/src/universal
  // TODO This image is (too!) huge... try switching to https://github.com/devcontainers/images/tree/main/src/base-debian?
  // Make sure https://github.com/vorburger/vorburger-dotfiles-bin-etc still work... ;-)
  "image": "mcr.microsoft.com/devcontainers/universal:2-linux",

  // TODO https://containers.dev/guide/dockerfile
  // "build": {
  //  // Path is relative to the devcontainer.json file.
  //   "dockerfile": "../Dockerfile-DevEnv"
  // }

  // https://containers.dev/implementors/json_reference/#lifecycle-scripts
  // is what you want, NOT features' "ghcr.io/devcontainers-contrib/features/bash-command:1"
  // (because that doesn't seem to have access to the workspace, whereas this does)
  "onCreateCommand": "/workspaces/enola/tools/devcontainer/install.bash",

  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {
    // DO NOT REMOVE THIS! Unless you *really* know what you're doing! Like really.
    //
    // The reason is that, while the CLI build with ./test.bash and all will still work,
    // the Visual Studio Code Web on GitHub Codespaces will break without this - even
    // if you installed Bazel/Bazelisk in another script, e.g. via ASDF or go install.
    //
    // The reason for that is that the Language Server from the VSC Bazel Java extension
    // needs to be able to launch "bazel" from PATH - and that only works if it's in a
    // directory that's on the OS default PATH, such as e.g. in /usr/local/bin/ - but
    // VSC (Web) WON'T WORK if bazelisk is in some place like ~/go/bin/ or ~/.asdf or
    // whatever.
    //
    // See also https://github.com/salesforce/bazel-vscode-java/issues/94
    // and use https://github.com/vorburger/LearningBazelJavaVSC as reference.
    //
    // TODO ghcr.io/devcontainers-community/features/bazel is broken?
    // see https://github.com/devcontainers-community/features-bazel/issues/10
    // and https://github.com/devcontainers/spec/issues/431
    //"ghcr.io/devcontainers-community/features/bazel:1": {
    //      "bazelisk_version": "v1.19.0"
    //   }
    //
    // Do *NOT* add anything else here; most other tools are always only installed
    // via https://asdf-vm.com from //.tool-versions!
  },

  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [],

  // Configure tool-specific properties; see https://containers.dev/supporting.
  "customizations": {
    "vscode": {
      // Keeping this in-sync (duplicated; urgh!) with .vscode/extensions.json
      // does NOT appear to pre-install them, it still annoyingly asks
      // "Do you want to install..." for *every* extension, so there is
      // really no point in duplicating the list here.
      "extensions": []
    }
  },

  "hostRequirements": {
    // sudo rm -rf ~/.cache/bazel/ to reproduce
    // "High codespace CPU (100%) utilization detected. Consider stopping some processes for the best experience."
    // 2-core • 8GB RAM • 32GB "time ./test.bash" on 1st run is >>21'
    // 4-core • 16GB RAM • 32GB "time ./test.bash" on 1st run is ~10.5'
    // 8-core • 32GB RAM • 64GB "time ./test.bash" on 1st run is ~6.8'
    // 16-core • 64GB RAM • 128GB "time ./test.bash" on 1st run is ~4.5'
    // 12-cores local workstation (Xeon) on 1st run is ~2.5' !!!
    "cpus": 4
  }
}
