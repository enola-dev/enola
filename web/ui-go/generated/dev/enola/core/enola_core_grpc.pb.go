// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: enola_core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnolaServiceClient is the client API for EnolaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnolaServiceClient interface {
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
}

type enolaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnolaServiceClient(cc grpc.ClientConnInterface) EnolaServiceClient {
	return &enolaServiceClient{cc}
}

func (c *enolaServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/dev.enola.core.EnolaService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnolaServiceServer is the server API for EnolaService service.
// All implementations must embed UnimplementedEnolaServiceServer
// for forward compatibility
type EnolaServiceServer interface {
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	mustEmbedUnimplementedEnolaServiceServer()
}

// UnimplementedEnolaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnolaServiceServer struct {
}

func (UnimplementedEnolaServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEnolaServiceServer) mustEmbedUnimplementedEnolaServiceServer() {}

// UnsafeEnolaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnolaServiceServer will
// result in compilation errors.
type UnsafeEnolaServiceServer interface {
	mustEmbedUnimplementedEnolaServiceServer()
}

func RegisterEnolaServiceServer(s grpc.ServiceRegistrar, srv EnolaServiceServer) {
	s.RegisterService(&EnolaService_ServiceDesc, srv)
}

func _EnolaService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnolaServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.enola.core.EnolaService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnolaServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnolaService_ServiceDesc is the grpc.ServiceDesc for EnolaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnolaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.enola.core.EnolaService",
	HandlerType: (*EnolaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntity",
			Handler:    _EnolaService_GetEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enola_core.proto",
}
