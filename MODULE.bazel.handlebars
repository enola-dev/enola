# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2023-2025 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# GENERATED FILE - DO NOT EDIT MANUALLY
# To make changes, instead of editing this MODULE.bazel, edit
# either MODULE.bazel.handlebars or MODULE.bom.handlebars.yaml,
# and then re-run ./MODULE.update.bash

# https://registry.bazel.build/modules/rules_java
bazel_dep(name = "rules_java", version = "8.16.1")

# see ./tools/java_toolchain/BUILD
# see https://github.com/bazelbuild/bazel/issues/20877, NB the "_definition" suffix!
register_toolchains("//tools/java_toolchain:repository_default_java_toolchain_definition")

# https://github.com/bazelbuild/rules_jvm_external/blob/master/docs/bzlmod.md#installation
# When bumping the version here, must always run: REPIN=1 bazelisk run @maven//:pin
bazel_dep(name = "rules_jvm_external", version = "6.8")

# https://github.com/bazel-contrib/rules_jvm_external/issues/1426
bazel_dep(name = "bazel_skylib", version = "1.8.2")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [{{#bom}}
        "{{this}}",
{{~/bom}}
    ],

    # NB: Never de-activate duplicate_version_warning = "error"!
    # While it can be tempting to resolve a build-time problem which
    # may have occurred when changing dependencies, it will only cause
    # runtime problems due to "classpath hell" later; it's ALWAYS better
    # to clean versions at build time!
    duplicate_version_warning = "error",
    # TODO Investigate why 'excluded_artifacts' is still needed, despite maven.artifact() exclusions?!
    excluded_artifacts = [
        # Thanks, but No Thanks! (Spring Boot drags this along, with ADK.)
        "ch.qos.logback:logback-core",
        "ch.qos.logback:logback-classic",

        # Most certainly no JS scripting! (jknack:handlebars drags this cat along)
        "org.openjdk.nashorn:nashorn-core",

        # List e.g. "com.github.multiformats:java-multihash" etc. here
        #   if using "com.github.vorburger:*" instead above, for unmerged patched versions.

        # https://commons.apache.org/proper/commons-logging/ is a PITA,
        # because it contains package org.apache.commons.logging, which we
        # already get from org.slf4j:jcl-over-slf4j, see https://www.slf4j.org/legacy.html
        "commons-logging:commons-logging",
        # Spring Boot (which we unfortunately use due to ADK Web's reliance on Spring Boot)
        # aggressively configures logging on its own, but we actually don't want that, because
        # our CLI already does it, so:
        "org.springframework.boot:spring-boot-starter-logging",
        # ROME Utils classes appear to also be included in com.rometools:rome - at least via Tika.
        "com.rometools:rome-utils",
        # ADK drags this cat along; Thanks, but No Thanks!
        "org.eclipse.jdt:ecj",
    ],
    fail_if_repin_required = True,
    fetch_sources = True,
    # https://github.com/enola-dev/enola/issues/1686
    # https://github.com/bazel-contrib/rules_jvm_external/blob/master/docs/bzlmod.md#module-dependency-layering
    known_contributing_modules = [
        "",
        "grpc-java",
        "protobuf",
    ],
    lock_file = "//:maven_install.json",
    repositories = [
        # Override legacy default https://repo1.maven.org/maven2/
        "https://repo.maven.apache.org/maven2/",

        # Used by Multiformats, IPFS & IPLD
        "https://jitpack.io",
    ],
){{#bomx}}
maven.artifact(
    {{gav this}}
)
{{~/bomx}}
use_repo(maven, "maven")
