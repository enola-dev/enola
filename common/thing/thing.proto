// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2024 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.thing;

// import "google/protobuf/timestamp.proto";

option java_string_check_utf8 = true;
option java_package = "dev.enola.thing";
option java_multiple_files = true;
option go_package = "dev/enola/thing";

// TODO Unify this with the original still in //core/lib!

// Thing is a generic datastructure which can hold any kind of information.
// It notably has a way to express links between things.
message Thing {
  // The IRI is often only set on the "top outer most", and may well be unset
  // for things "contained" in other things (RDF calls this "blank nodes"). It's
  // not even mandatory required for the "top outer most" one either.
  string iri = 1;

  // Key string is an IRI (of a "property").
  map<string, Value> fields = 2;
}

// Value is the stuff that Thing's fields are made of.
message Value {
  oneof kind {
    // TODO enum NullValue { NULL_VALUE = 0; } like in
    // https://github.com/protocolbuffers/protobuf/blob
    // /7949a62bf88e1d4e97c93b3a7b8a8cfb201b713a/src/google/protobuf/struct.proto#L84C1-L88C1

    Link link = 1;

    string string = 2;

    Literal literal = 3;

    LangString lang_string = 4;

    // https://protobuf.dev/programming-guides/proto3/#scalar
    // TODO Reconsider if this is really needed?! By who, for what?
    // bytes bytes = 4;
    // int32 int32 = 5;
    // int64 int64 = 6;
    // uint32 uint32 = 7;
    // uint64 uint64 = 8;
    // sint32 sint32 = 9;
    // sint64 sint64 = 10;
    // fixed32 fixed32 = 11;
    // fixed64 fixed64 = 12;
    // sfixed32 sfixed32 = 13;
    // sfixed64 sfixed64 = 14;
    // double double = 15;
    // float float = 16;
    // bool bool = 17;

    Thing struct = 18;

    // TODO Do we actually need List? That's just a stream of Thing, no?
    // TODO Inline? repeated Thing things = 18;
    // TODO Never has an IRI? Maybe just repeated Value values = 18;
    // List list = 19;
  }

  message Link {
    string iri = 1;

    // This is something to show humans, it's the "text to click on for this
    // link", e.g. from the "title" of the resource that the IRI points to.
    // This concept doesn't exist as such in RDF, but it's important to us.
    string label = 2;

    // TODO Is there any point/interest in Link (optionally) having a
    // LangString? Note that RDF doesn't even have labels on links anyway.
    // LangString lang_string = 3;
  }

  message Literal {
    // Value of the literal. This is "encoded" by the datatype, below. (RDF
    // calls this the "label", but to us that sounds wrong, because it evokes
    // "something to show human users" too much.)
    string value = 1;

    // This is an IRI.
    string datatype = 2;
  }

  message LangString {
    // Text, for humans.
    string text = 1;

    // BCP 47 “language tag” (e.g. “de-ch”) of the text.
    string lang = 2;
  }

  // message List {
  //   repeated Thing entries = 1;
  // }
}

// TODO Allow "uint64 id" instatead string IRIs (or all Value?), similar to
// https://rdf4j.org/documentation/reference/rdf4j-binary/

// Implementation notes (not documentation for user of proto)
//
// There is intentionally nothing of this sort here:
//   message Things { repeated Thing things = 1; }
// This is because we want developers to (only) use "streaming" instead.
//
// Thing is (obviously) inspired by "Triples" (RDF), but also things such as
// google/protobuf/struct.proto (+link), JSON (+ JSON-LD, for links), [Cap'n
// Proto's
// schema.capnp](https://github.com/capnproto/capnproto/blob/master/c%2B%2B/src/capnp/schema.capnp),
// et al.
//
// It intentionally doesn't quite look like
// https://github.com/apache/jena/blob/main/jena-arq/Grammar/RDF-Protobuf/binary-rdf.proto,
// because RDF4j already has its own binary serialization format - the point of
// this is not to directly replicate that, but to permit integration of RDF4j
// into Protocol Buffer based ecosystems.
