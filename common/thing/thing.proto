// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2024 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.thing;

// TODO Remove original Thing message that's still in enola_core.proto!

option java_string_check_utf8 = true;
option java_package = "dev.enola.thing.proto";
option java_multiple_files = true;
option go_package = "dev/enola/thing";

// Things are repeated things.
// TODO Keep Things? Or (better...) replace with "streaming" gRPC, only?
message Things {
  repeated Thing things = 1;
}

// Thing is a generic datastructure for Linked Data.
//
// It is inspired by the Resource Description Framework (RDF)
// and its Subject / Predicate / Object "Triples". It's however
// not "flat", but represents "Blank Nodes" as "Unlabeled Nested"
// sub-structures, which makes it resemble regular ProtoBuf / JSON / YAML.
//
// This is also very close to (essentially really just a Protocol Buffer
// representation of) the "Expanded Term Definition" of the W3C's JSON-LD
// format.
//
// This obviously also looks a bit similar to Proto's Struct
// (see google/protobuf/struct.proto), with additional explicit Links.
//
// Cap‚Äôn Proto's interface types, which are passed by reference instead of value
// over its RPC protocol, also somewhat resemble the explicit links used here.
//
message Thing {
  // The IRI is often only set on the "top outer most", and may well be unset
  // for things "contained" in other things (RDF calls this "blank nodes"). It's
  // not even mandatory required for the "top outer most" one either.
  // (TODO Why do we even need this?! Why not just use an
  // https://schema.org/identifier field/attribute?)
  string iri = 1;

  // Key string is an IRI (of a "property"). Nota Bene: This is never a ‚Äúname‚Äù
  // (or even a ‚Äúlabel‚Äù), but really an IRI. In theory such a Property IRI could
  // be unique to only this single Thing; more typically, it is shared among
  // things of the same type. Crucially though, it could also be an IRI of a
  // property that is common among attributes of *different* types! Classic
  // examples are e.g. https://schema.org/name (rdfs:label üè∑Ô∏è) or rdf:type.
  //
  // TODO Rename this from fields to properties, because fields is quite
  // confusing at least in the Java proto API, where it has another meaning too.
  map<string, Value> fields = 2;
}

// Value is the stuff that Thing's fields are made of.
message Value {
  oneof kind {
    // TODO enum NullValue { NULL_VALUE = 0; } like in
    // https://github.com/protocolbuffers/protobuf/blob
    // /7949a62bf88e1d4e97c93b3a7b8a8cfb201b713a/src/google/protobuf/struct.proto#L84C1-L88C1

    Link link = 1;
    // string link = 1;

    string string = 2;

    Literal literal = 3;

    // TODO Keep or remove this? See
    // https://github.com/enola-dev/enola/pull/540...
    LangString lang_string = 4;

    // Sub-structure (contained) Thing.
    Thing struct = 5;

    // List of Values.
    List list = 6;

    // NB: There are currently intentionally no other "basic types" than
    // string here; because as-is this is primarily mostly intended for end-user
    // viewing (so we convert it before, but preserve the origin via Literal's
    // datatype). If needed later, in theory we well *COULD* add all of
    // https://protobuf.dev/programming-guides/proto3/#scalar as kinds here...
    // but it's currently not clear what would need and make use of this.
    //
    // bool bool = 7;
    // bytes bytes = 8;
    // int32 int32 = 9;
    // int64 int64 = 10;
    // uint32 uint32 = 11;
    // uint64 uint64 = 12;
    // sint32 sint32 = 13;
    // sint64 sint64 = 14;
    // fixed32 fixed32 = 15;
    // fixed64 fixed64 = 16;
    // sfixed32 sfixed32 = 17;
    // sfixed64 sfixed64 = 18;
    // double double = 19;
    // float float = 20;
    // google.protobuf.Timestamp ts = 21;
  }

  message Link {
    string iri = 1;

    // This is something to show humans, it's the "text to click on for this
    // link", e.g. from the "title" of the resource that the IRI points to.
    // This concept doesn't exist as such in RDF, but it's important to us.
    //
    // (TODO Reconsider if since we now have the MetadataProvider we still want
    // to keep this, or abandon this field and replace it with metadata fetching
    // in the UI; just like we do for the IRI key of the property? Then we can
    // "inline" and entirely get rid of message Link!)
    string label = 2;
  }

  message Literal {
    // Value of the literal. This is "encoded" by the datatype, below. (RDF
    // calls this the "label", but to us that sounds wrong, because it evokes
    // "something to show human users" too much.)
    string value = 1;

    // This is an IRI.
    string datatype = 2;
  }

  // TODO Keep or remove this? See
  // https://github.com/enola-dev/enola/pull/540...
  message LangString {
    // Text, for humans.
    string text = 1;

    // BCP 47 ‚Äúlanguage tag‚Äù (e.g. ‚Äúde-ch‚Äù) of the text.
    string lang = 2;
  }

  message List {
    repeated Value values = 1;
  }
}

message ThingMetadata {
  string id = 1;
  string label = 2;
  string description_html = 3;
  string image_html = 4;
}

message LinksMetadata {
  // Map key is IRI.
  map<string, ThingMetadata> metadata = 1;
}

message TextThings {
  repeated string imports = 2;
  map<string, string> prefixes = 3;
  map<string, TextThing> things = 4;
}
message TextThing {
  map<string, string> properties = 1;
}

message CompactThings {
  uint64 id = 1;
  map<uint64, CompactThing> things = 2;
  map<uint64, string> links = 3;
}
message CompactThing {
  // TODO bytes, really?
  map<uint64, bytes> properties = 1;
}

// TODO Using "uint64 id" instead the string IRIs could permit a more
// "scalable" distributed RDF-like data model with Protocol Buffers. (Simply
// because as-is, the repeated serialization of all those long IRI Strings
// is not ideal. See also e.g. the "value-reference-declaration-records" of
// https://rdf4j.org/documentation/reference/rdf4j-binary.)
//
// PS: Apache Jena's
// https://github.com/apache/jena/blob/main/jena-arq/Grammar/RDF-Protobuf/binary-rdf.proto
// very vaguely resembles this, but has a different purpose, of course.
