syntax = "proto3";

package dev.enola.core;

option java_string_check_utf8 = true;
option java_package = "dev.enola.core.proto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

enum Status {
  STATUS_UNSPECIFIED     = 0;
  STATUS_OK              = 200;
  STATUS_OK_BUT_DEGRADED = 300;
  STATUS_NOK_DEPENDENCY  = 502;
  STATUS_NOK_ITSELF      = 503;
}

// TODO Rename URI to ID, and document accordingly...
// ID of an object known to Enola.
// In text (string) form, it "looks" like an RFC-* Uniform Resource Identifier (URI, not URN),
// but this is just because humans are used to things looking like this, and we want
// some "standard"-like format. The syntax is actually simpler and quite a bit more restricted,
// see https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax:
//
// * The "scheme" is just a namespace, which typically aligns with service implementations
// * The "authority" (//...) is not used (and IDs with them are rejected; see IDsTest.java)
// * The "path" is not actually a path, but just a name of a kind of entity within that scheme. It can contain slashes, but they are not interpreted.
// * The "query" (?...) is used to identify a specific entity (with a name or UUID or whatever; specific to each entity)
// * The "fragment" (#...) is not used (and IDs with them are rejected; see IDsTest.java)
//
// Things like a "cluster" or a "rack" or whatever "hierarchies" an entity may have are, by convention,
// not part of the entity, but represented as part of the query; for example:
// * k8s:pod?network=prod&context=demo&namespace=test&name=hello
//
// Note that IDs are not "unique", and 2 different IDs may refer to the same underlying object; for example:
// * k8s:pod?name=echoserver-6dfb6c7764-45gvk&...
// * k8s:pod?uid=561f1bec-f768-4c5b-b96e-37306d7f2f8a&...
message URI {
  oneof oneof {
    string text  = 1;
    Parts parts  = 2;
  }
  message Parts {
    string scheme = 1;
    string entity = 2;
    repeated NameValue query = 3;
  }
  message NameValue {
    string name = 1;
    string value = 2;
  }
}

message GetRequest {
  URI uri = 1;

  // google.protobuf.Timestamp ts = 2;
  // google.protobuf.Timestamp start = 2;
  // google.protobuf.Timestamp end = 3;
  // google.protobuf.Duration granularity = 4;
}
message GetResponse {
  URI uri = 1;
  google.protobuf.Timestamp ts = 2;
  Status status = 3;
  repeated string depends_on = 4;
  string is_owned_by = 5;
  google.protobuf.Any proto = 6;
}

message QueryURIRequest {
  // Parts can be empty;
  // if no scheme, returns all schemes;
  // if scheme but not no entity, returns all entities of the scheme;
  // if scheme and entity, returns all available query parameter names (without values).
  URI.Parts uri_parts = 1;
}
message QueryURIResponse {
  repeated URI uris = 1;
}

service EnolaService {
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc QueryURI(QueryURIRequest) returns (QueryURIResponse) {}
}
