// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2023 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.core;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option java_string_check_utf8 = true;
option java_package = "dev.enola.core.proto";
option java_multiple_files = true;

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_OK = 200;
  STATUS_OK_BUT_DEGRADED = 300;
  STATUS_NOK_DEPENDENCY = 502;
  STATUS_NOK_ITSELF = 503;
}

// ID of an object known to Enola.
// In text (string) form, it "looks" like an RFC 2396 Uniform Resource
// Identifier (URI, not URN), but this is just we want some "standard"-like
// format which humans are used to seeing. The real syntax is actually simpler
// and quite a bit more restricted, see
// https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax:
//
// * The "scheme" is just a "namespace" in Enola, which typically aligns with
// "Connector" module RPC service implementations.
// * The "authority" (//...) is not used (and IDs with them are rejected; see
// IDsTest.java).
// * The "path" is not actually a path, but just a name of a kind of entity
// within that scheme. It cannot contain slashes.
// * The "query" (?...) is used to identify a specific entity (with one or
// several names or UUID or whatever; specific to each entity).
// * The "fragment" (#...) is not used (and IDs with them are rejected; see
// IDsTest.java).
//
// Things like a "cluster" or a "rack" or whatever "hierarchies" an entity may
// have are, by convention, not part of the entity (path), but represented as
// part of the query; for example:
// * k8s:pod?network=prod&context=demo&namespace=test&name=hello
message ID {
  oneof oneof {
    string text = 1;
    Parts parts = 2;
  }
  message Parts {
    string scheme = 1;
    string entity = 2;
    map<string, string> query = 3;
  }
}

message Entity {
  ID id = 1;
  google.protobuf.Timestamp ts = 2;
  Status status = 3;

  // Related Enola Entities.
  // Intended for consumption by both machines as well as humans.
  // Key is EntityKind#related.key (modeled by EntityRelationship), value is ID.
  map<string, ID> related = 5;

  // HTTP URL hypertext references to additional information on other systems.
  // Intended for human consumption, only.
  // Key is EntityKind#href.key (modeled by WebLink), value is an absolute URL.
  map<string, string> href = 6;

  // URIs linked to this entity.
  // Often "back-end" state information,
  // used e.g. to determine an Entity's status, etc.
  // Intended primarily for consumption by machines.
  // These can be requested to be "inlined" in responses.
  // Key is EntityKind#link.key (modeled by Datalink), value is an URI.
  // This URI may well be specific to the respective schema connector.
  map<string, string> link = 7;
}

message GetEntityRequest {
  ID id = 1;

  // Request to inline Entity#link, by the same string key as used there.
  // (Conceptually inspired by e.g. GraphQL architecture.)
  repeated string inline_links = 2;
}
message GetEntityResponse {
  Entity entity = 1;

  repeated InlineLinkData data = 2;
  message InlineLinkData {
    oneof oneof {
      google.protobuf.Any protos = 1;
      string json = 2;
    }
  }
}

// TODO Later have an RPC for a time series XRequest, and XResponse with
// repeated Entity?
//   google.protobuf.Timestamp ts = 2;
//   google.protobuf.Timestamp start = 2;
//   google.protobuf.Timestamp end = 3;
//   google.protobuf.Duration granularity = 4;

service EnolaService {
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}
}
