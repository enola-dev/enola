// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2023 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.core.connector;

import "core/lib/src/main/java/dev/enola/core/enola_core.proto";

option java_string_check_utf8 = true;
option java_package = "dev.enola.core.connector.proto";
option java_multiple_files = true;

message AugmentRequest {
  dev.enola.core.Entity entity = 1;

  // Intentionally no EntityKind! It would be wasteful to resend it every time.
}
message AugmentResponse {
  dev.enola.core.Entity entity = 1;
}

// Request for a list of entities.
// For the https://docs.enola.dev/use/library/ example model, examples could be:
//   A. Set 'kind' to 'book_kind', without the 'isbn' path - list all
//   B. Set 'kind' to 'book', and the 'library' path - from a specific library
// Note that for the example library model you would not use the related_filter,
// as the only two related (the 'library' and the 'kind') are available in the
// paths; but if it had any other related, one could filter one or several of
// those.
message ListRequest {
  // The EntityKind to be returned.
  dev.enola.core.ID kind = 1;

  // Filters on related entities.
  // The key is as in EntityKind or Entity's .related,
  // and the value is the ("scope") related entity to filter on.
  // If there is more than one, these are AND, not OR.
  map<string, ID> related_filter = 2;

  // TODO Add dataFilter? E.g. for all Books that are currently borrowed.
}

message ListResponse {
  repeated dev.enola.core.Entity entities = 1;
}

// This is the API which Enola Connectors implement.
// Enola Core calls this API for each of the listed connector of an EntityKind.
// Enola clients (such as a CLI or UI) use the EnolaService, instead of this
// directly. This is the gRPC equivalent of the internal EntityAspect Java API.
service ConnectorService {
  rpc Augment(AugmentRequest) returns (AugmentResponse) {}
  rpc List(ListRequest) returns (ListResponse) {}
}
