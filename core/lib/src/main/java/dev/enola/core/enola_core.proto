// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2023 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.core;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option java_string_check_utf8 = true;
option java_package = "dev.enola.core.proto";
option java_multiple_files = true;

// ID of an Entity known to Enola, fully qualified.
// Can be formatted to and parsed from several different string text forms,
// see class dev.enola.core.IDs.
message ID {
  // Namespace.
  // Serves to distinguish same entity names (below).
  // This is optional if in your use of Enola you avoid name conflicts.
  // It's like in C# or "package" in Java or Go or the xmlns: from XML Schema,
  // or whatever the hell confusing thing ;) that Python is doing about this.
  // Validated to only contain [a-z0-9_.] characters, so it's safe in URLs.
  // By convention can contain '.' for sub-namespacing, but does not have to.
  // The namespace of an Entity is always the same as its EntityKind.
  string ns = 1;

  // Entity Kind Name.
  // This is mandatory and thus always present.
  // This refers to an EntityKind and not an individual Entity, despite the
  // name. (In practice this is just shorter and clearer for people to
  // understand.) Validated to only contain [a-z0-9_] characters, so it's safe
  // in URLs.
  string entity = 2;

  // Path.
  // This is mandatory and thus always present with at least 1 element.
  // Think of this as what would typically uniquely identify this entity IRL;
  // e.g. a "hostname" or some UUID or a S/N or whatever is its "primary key".
  // Validated to only contain [a-z0-9_-.] characters, so it's safe in URLs.
  // (This restriction could in theory be relaxed, if there was a strong need
  // to support it; as long as sufficient test coverage is added for correct
  // encoding in URIs, see https://en.m.wikipedia.org/wiki/URL_encoding.)
  // Multiple "segments" are supports for "composed keys", for example a
  // network/context/namespace/name kind of format.
  // TODO If needed, maybe (later) oneof map<string, string> for multi??
  repeated string paths = 3;
}

// This is useful e.g. for *.textproto files to contain more than 1 Entity.
// It is inspired by how a YAML file can contain multiple --- root objects.
message Entities {
  repeated Entity entities = 1;
}

message Entity {
  ID id = 1;
  google.protobuf.Timestamp ts = 2;

  // Related Enola Entities.
  // Intended for consumption by both machines as well as humans.
  // Key is EntityKind#related.key (modeled by EntityRelationship), value is ID.
  map<string, ID> related = 5;

  // URIs linked to this entity providing additional information about it on
  // other systems.
  //
  // Key is EntityKind#link.key, value is an URI, often pointing to "back-end"
  // state information, used e.g. to determine an Entity's status, etc.
  //
  // If http[s]: then these are informational and destined to be displayed to a
  // human on a UI, but not "machine readable" for interpretation. Any other URI
  // scheme is intended to be (only) machine readable and up to the client to
  // interpret. This URI may well be specific to the respective schema
  // connector.
  //
  // These can be requested to be "inlined" in responses.
  map<string, string> link = 7;

  // Data about the Entity, in machine readable form, as Any protobuf.
  map<string, google.protobuf.Any> data = 9;
}

message GetEntityRequest {
  ID id = 1;

  // Request to inline Entity#link, by the same string key as used there.
  // (Conceptually inspired by e.g. GraphQL architecture.)
  // TODO repeated string inline_links = 2;
}
message GetEntityResponse {
  Entity entity = 1;

  /*
    TODO Think this through & implement it...

    repeated InlineLinkData data = 2;
    message InlineLinkData {
      oneof oneof {
        google.protobuf.Any protos = 1;
        string json = 2;
      }
    } */
}

// TODO rpc watch(), for a time series WatchRequest/Response with repeated
// Entity?
//   google.protobuf.Timestamp ts = 2;
//   google.protobuf.Timestamp start = 2;
//   google.protobuf.Timestamp end = 3;
//   google.protobuf.Duration granularity = 4;

service EnolaService {
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}
}
