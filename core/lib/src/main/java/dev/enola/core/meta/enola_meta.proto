// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2023 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.core.meta;

import "core/lib/src/main/java/dev/enola/core/enola_core.proto";

option java_string_check_utf8 = true;
option java_package = "dev.enola.core.meta.proto";
option java_multiple_files = true;
option go_package = "dev/enola/core/meta";

// message MetaModelPackage {
// Scheme, as-in ID.parts.scheme; in lower case and without any spaces.
// TODO Enable this, with validation that entities don't have it, and
// "complete" it on read string package = 1;

message EntityKinds {
  repeated EntityKind kinds = 1;
}

// Kind of an Entity, as in message Entity.
message EntityKind {
  // ID.
  // The ns may be filled in by the reader, if omitted in *-model.textproto.
  // The entity is the name of THIS EntityKind! This is typically never changed
  // anymore after initial creation. The path contains' the segments' names
  // (here, whereas in Entity it's the "values").
  ID id = 1;

  // Human readable label of entity, may be several words, any case.
  // This can easily be changed at any time.
  string label = 2;

  // The Emoji shown as prefix to the name in UIs, if there is no logo.
  string emoji = 3;

  // Logo (as URL; either absolute, or URL relative to the model's textproto
  // file location - from where a UI will serve it).
  string logo_url = 4;

  // Documentation description (as URL; either absolute, or URL relative to the
  // model's textproto file location - from where a UI will serve it).
  string doc_url = 5;

  // Description of related Entities.
  // The string keys here match Entity#related's.
  map<string, EntityRelationship> related = 14;

  // Description of URL links.
  // The string keys here match Entity#links's.
  map<string, Link> link = 15;

  // Description of data about the Entity, in machine readable form.
  // The string keys here match Entity#data's.
  map<string, Data> data = 16;

  repeated Connector connectors = 20;

  // TODO Describe detailed "state machine"
  // TODO Build cool visualization of said state machine as fancy diagram
}

// Entity#related map model; its key is the same as this in EntityKind#related.
message EntityRelationship {
  // Human readable label, may be shown on a UI.
  string label = 2;

  // Short 1-2 sentences of description, may be shown on a UI e.g. as tooltip.
  string description = 3;

  // ID reference to another Entity.
  // This ID's ns/entity/paths fields can contain a template, like
  // Link#uri_template. Alternatively, this can be left empty, and set by
  // connectors.
  ID id = 4;

  // Tags.
  map<string, string> tags = 5;
}

// Entity#link map model; its key is the same as this in EntityKind#link.
message Link {
  // Human readable label, may be shown on a UI.
  string label = 2;

  // Short 1-2 sentences of description, may be shown on a UI e.g. as tooltip.
  string description = 3;

  // URI template, to create URL.
  // As an ID URI Template (RFC 6570); see
  // https://en.wikipedia.org/wiki/URI_Template.
  // The available variables are the ID's path parameters, as well as a special
  // proto.* which allows to declaratively create links out of the Any proto
  // (instead of coding link generation in the service; which is always still
  // also possible).
  string uri_template = 4;

  // Tags.
  map<string, string> tags = 5;

  /*
    TODO Consider if we should declare what to expect at the link?

    string media_type = 5;

    enum Kind {
      KIND_UNSPECIFIED = 0;
      KIND_PROTOBUF = 1;
      KIND_JSON = 2;
    }
    Kind kind = 5;
  */
}

message Data {
  // Human readable label, may be shown on a UI.
  string label = 2;

  // Short 1-2 sentences of description, may be shown on a UI e.g. as tooltip.
  string description = 3;

  // Tags.
  map<string, string> tags = 5;

  // The fully qualified name of the (root) Protocol Buffer Message; see
  // https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/any.proto
  string type_url = 6;
}

message Connector {
  oneof type {
    // Always fails with this error message (for testing, only).
    string error = 1;

    // Java class name for in-process connector on the Java classpath.
    string java_class = 2;

    // TODO java_guice lookup?

    FileSystemRepository fs = 4;

    // Invokes remote connector via gRPC.
    // The "connection string" here is a target endpoint in hostname:port
    // format. (It's NOT an URI, so there is no scheme:// nor any /path/ or
    // #fragment.)
    string grpc = 5;
  }
}

message FileSystemRepository {
  string path = 1;

  enum Format {
    FORMAT_UNSPECIFIED = 0;
    FORMAT_TEXTPROTO = 1;
    FORMAT_YAML = 2;
    FORMAT_JSON = 3;
  }
  Format format = 2;

  // TODO https://github.com/enola-dev/enola/issues/238
  // repeated string protos = 3;
}
