# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2024 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Common
id: dev.enola.common
iri: https://enola.dev/common
java:package: dev.enola.model.enola.common

.prefixes:
  xsd: http://www.w3.org/2001/XMLSchema#

datatypes:
  String:
    description:
      Any text string, incl. spaces and newlines etc. No HTML or Markdown though. Use sparingly; prefer more specific
      types!
    iri: https://enola.dev/String
    java:type: java.lang.String
    proto: string
    xsd: xsd:string
  Text:
    description:
      Text incl. spaces and newlines etc. which is meaningful to humans (and LLMs), in a specific syntax such as a human
      or programming language.
    iri: https://schema.org/Text
    parent: String
  Text1:
    description: Text in a single paragraph, without newlines.
    iri: https://enola.dev/Text1
    parent: Text
  Markdown:
    description-md: Text which is interpreted as [Common Markdown](https://commonmark.org) syntax.
    iri: https://enola.dev/Markdown
    parent: Text
  Identifier:
    description: String which identifies things to machines; not necessarily globally unique.
    iri: https://enola.dev/Identifier
    parent: String
  Name:
    description: Identifier with CamelCase, with underscores OK, but no spaces or dots or colons or hyphens etc.
    iri: https://enola.dev/Name
    parent: Identifier
    # TODO regexp: "^[a-zA-Z][a-zA-Z0-9_]*$"
    xsd: xsd:NCName
  # TODO Having both Names & ID is a bit confusing... can we get rid of one of them?!
  Names:
    description: Identifier with underscores and dots, but no spaces or colons or hyphens etc.
    iri: https://enola.dev/Names
    parent: Identifier
    # TODO regexp: "^[a-zA-Z][a-zA-Z0-9_.]*$"
    xsd: xsd:NMTOKEN
  ID:
    description: Identifier with underscores and dots and colons, but no spaces or hyphens or slashes.
    iri: https://enola.dev/ID
    parent: Identifier
    # TODO regexp: "^[a-zA-Z][a-zA-Z0-9_.:]*$"
    xsd: xsd:ID
  IRI:
    description:
      Logical (may not "resolve") absolute or relative IRI. Do NOT use this when you can instead better use a strongly
      typed real link!
    iri: https://enola.dev/IRI
    parent: Identifier
    java:type: java.net.URI
    xsd: xsd:anyURI
  IRITemplate:
    parent: String
    label: IRI Template
    description: Datatype for RFC 6570 URI Templates. Used e.g. in an iriTemplate Class property.
    iri: https://enola.dev/IRITemplate
    enola:emoji: {}
    # TODO enola:wikipedia "URI_Template";
    # TODO enola:wikidata "2467760";
    # TODO enola:rfc "6570";
    # TODO enola:gkg "m/05q4zt_";
    # TODO rdfs:seeAlso iriTemplate
  URL:
    description: Physical (typically "resolves") absolute or relative IRI.
    iri: https://schema.org/URL
    parent: Identifier
    java:type: java.net.URI
    xsd: xsd:anyURI
  MediaType:
    description: Internet Media Type, also known as a MIME Type or Content Type.
    iri: https://enola.dev/MediaType
    java:type: com.google.common.net.MediaType
    # TODO enola:rfc: 6838
  Binary:
    description: Unbounded sequence of 0s and 1s. Use sparingly; prefer more specific types!
    iri: https://enola.dev/Binary
    java:type: dev.enola.common.io.ByteSourcer
    proto: bytes
    xsd: xsd:base64Binary
  Boolean:
    description: True, or False - that is the question...
    iri: https://enola.dev/Boolean
    java:type: java.lang.Boolean
    proto: bool
    xsd: xsd:boolean
  Long:
    description: Number between -9223372036854776000 (-2^63) and 9223372036854776000 (2^63 - 1)
    iri: https://enola.dev/Long
    java:type: java.lang.Long
    proto: sint64
    xsd: xsd:long
  UnsignedLong:
    description: Number between 0 and 18446744073709551615 (2^64 ‚àí 1).
    iri: https://enola.dev/UnsignedLong
    java:type: com.google.common.primitives.UnsignedLong
    proto: uint64
    xsd: xsd:unsignedLong
  Integer32:
    description: Number between -2147483648 (-2^31) and 2147483647 (2^31 - 1). Not to confuse with BigInteger.
    iri: https://enola.dev/Integer32
    java:type: java.lang.Integer
    proto: sint32
    xsd: xsd:int # NOT xsd:integer!
  UnsignedInteger32:
    description: Number between 0 and 4294967295 (2^32 - 1). Not to confuse with BigInteger.
    iri: https://enola.dev/UnsignedInteger32
    java:type: com.google.common.primitives.UnsignedInteger
    proto: uint32
    xsd: xsd:unsignedInt # NOT xsd:negativeInteger!
  Short:
    description: Number between -32768 (-2^15) and 32767 (2^15 - 1).
    iri: https://enola.dev/Short
    java:type: java.lang.Short
    proto: sint32 # ProtoBuf has no Short
    xsd: xsd:short
  UnsignedShort:
    description: Number between 0 and 65536 (2^16).
    iri: https://enola.dev/UnsignedShort
    java:type: java.lang.Short
    proto: unit32 # ProtoBuf has no Short
    xsd: xsd:unsignedShort
  Byte:
    description: Number between -256 (-2^8) and 255 (2^8 - 1).
    iri: https://enola.dev/Byte
    java:type: java.lang.Byte
    proto: sint32 # ProtoBuf has no Byte
    xsd: xsd:byte
  UnsignedByte:
    description: Number between 0 and 256 (2^8).
    iri: https://enola.dev/UnsignedByte
    java:type: java.lang.Byte
    proto: uint32 # ProtoBuf has no Byte
    xsd: xsd:unsignedByte
  BigInteger:
    description:
      Number without dot (.) without any lower or upper bound; AKA an arbitrary-precision signed integer number. E.g.
      -123456789012345678901234567890.
    iri: https://enola.dev/BigInteger
    java:type: java.math.BigInteger
    # ProtoBuf does not have this!
    xsd: xsd:integer
  Decimal:
    description:
      Number possibly with dot (.) without any lower or upper bound; AKA an arbitrary-precision signed decimal
      number.  E.g. -123456789012345678901234567890.123.
    iri: https://enola.dev/Decimal
    java:type: java.math.BigDecimal
    # ProtoBuf does not have this!
    xsd: xsd:decimal
  Double:
    description:
      Number that's a double-precision 64-bit IEEE 754 floating point, including Not-a-Number (NaN), both -0 and +1, and
      +/- ‚ôæÔ∏è infinity.
    iri: https://enola.dev/Double
    java:type: java.lang.Double
    proto: double
    xsd: xsd:double
  Float:
    description:
      Number that's a single-precision 32-bit IEEE 754 floating point, including Not-a-Number (NaN), both -0 and +1, and
      +/- ‚ôæÔ∏è infinity.
    iri: https://enola.dev/Float
    java:type: java.lang.Float
    proto: float
    xsd: xsd:float
  Timestamp:
    description: Date and Time; global, without timezone.
    iri: https://enola.dev/Timestamp
    java:type: java.time.Instant
    proto: google.protobuf.Timestamp
    xsd: xsd:dateTime
    enola:emoji: üïë
  FileTime:
    description:
      Date and Time; global, without timezone. This can store points on the time-line further in the future and further
      in the past than Timestamp.
    iri: https://enola.dev/FileTime
    java:type: java.nio.file.attribute.FileTime
    enola:emoji: üïë
  HTML:
    parent: rdf:HTML
    description: HTML data.
    iri: https://enola.dev/HTML
    java:type: org.jsoup.nodes.Document
  JSON:
    description: JSON data.
    iri: https://enola.dev/JSON
  YAML:
    description: YAML data.
    iri: https://enola.dev/YAML
  XML:
    parent: rdf:XMLLiteral
    description: XML data.
    iri: https://enola.dev/XML
    java:type: org.w3c.dom.Document

properties:
  name:
    type: Name
    description: Name of Thing. When part of an ID, often its (and IRI's) last segment.
    iri: https://enola.dev/name
  label:
    type: String
    description: Label of Thing. For humans, may have spaces etc.
    iri: https://www.w3.org/TR/rdf-schema/#ch_label
    parent: name
  description:
    type: String
    iri: https://schema.org/description
    description: Description of Thing. Basically a longer label.
  description_md:
    type: Markdown
    parent: description
    iri: https://enola.dev/description_md
    description: Description of Thing, in Markdown format. Basically a longer label.
  emoji:
    type: String
    iri: https://enola.dev/emoji
  iri_template:
    type: IRITemplate # Templates are *NOT* valid IRI (or URL)
    iri: https://enola.org/iriTemplate
  example:
    type: IRI
    iri: https://enola.dev/example
  enid:
    description:
      Enola Numeric ID. Identifier of Thing which is unique within a given Enola instance (only, not globally).
    type: UnsignedLong
    iri: https://enola.dev/enid
  origin:
    description: What something is "based on", e.g. where it "comes from".
    iri: https://enola.dev/origin
    enola:emoji: "üè∫"
    type: IRI
  origins:
    description: What something is "based on", e.g. where it "comes from".
    iri: https://enola.dev/origins
    enola:emoji: "üè∫"
    type: IRI*
