# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2024 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO Remove this once we can generate it (in-memory) from files.esch

name: Files
id: dev.enola.files
iri: https://enola.dev/files
description: Model of Files in Directories of File Systems.
java:package: dev.enola.model.enola.files

imports:
  enola: common.yaml

classes:
  Node:
    # TODO iri_template: file://{host}/{parent}/{name}?filesystem={filesystem}
    # This ^^^ is actually problematic, because we do also want to support e.g.
    # jimfs://c98ff514-82f9-460d-9abc-92232804260c/folder/hello.txt et all.
    ids:
      host: net:Hostname
      filesystem: Filesystem
      parent: Directory
      name: String
    properties:
      createdAt: Instant
      modifiedAt: Instant

  File:
    parents: Node
    enola:emoji: üóé
    description: "File holds [[Data]], identified by a [[Path]] on a [[Filesystem]], with a [[MediaType]]."
    enola:wikipedia: https://en.wikipedia.org/wiki/Computer_file
    enola:example: file://localhost/tmp/dir/hello.txt?filesystem=default
    properties:
      size:
        type: enola:Long # TODO Use a Datatype which permits KiB/MB etc. (from UoM?)
        description: Number of bytes of data.
      mediaType: MediaType

  Directory:
    parents: Node
    enola:emoji: üìÅ
    description: "Directory is a [[Container]] of other Directories and [[File]]s."
    enola:wikipedia: https://en.wikipedia.org/wiki/Directory_(computing)
    properties:
      children:
        type: Node*
        inverse: parent

  Link:
    parents: Node
    properties:
      target: Node

  Filesystem:
