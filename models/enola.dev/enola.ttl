# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2024 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

@prefix enola:  <https://enola.dev/>.
@prefix enolay: <https://enola.dev/yaml/>.
@prefix enolaj: <https://enola.dev/java/>.
@prefix owl:    <http://www.w3.org/2002/07/owl#>.
@prefix schema: <https://schema.org/>.
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>.
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#>.

enola:ontology a owl:Ontology;
  rdfs:label "Enola.dev's base/core Ontology.".

enola:Embedded a rdfs:Class;
  rdfs:comment "Parent (abstract) Class for things which have no IRI identity of their own and which thus should only ever appear in 'RDF blank nodes'. (Like owl:hasValue _:bNode on an owl:DatatypeProperty; without OWL dependency. Or like a sh:nodeKind sh:BlankNode SHACL shape.)".

# NOT enola:Timestamped a rdfs:Class;

enola:Event a rdfs:Class;
  rdfs:comment "Parent (abstract) Class for anything which happened at the specified #timestamp dateTime.".

enola:timestamp a rdf:Property;
  rdfs:range xsd:dateTime;
  rdfs:domain enola:Event;
  rdfs:comment "Instant at which this happened.";
  enola:emoji "üïë".

enola:TimeIntervaled a rdfs:Class;
  rdfs:comment "Parent (abstract) Class for anything which has a start & end #timestamp dateTime.".

enola:startedAt a rdf:Property;
  rdfs:subPropertyOf enola:timestamp;
  rdfs:domain enola:TimeIntervaled.

enola:endedAt a rdf:Property;
  rdfs:subPropertyOf enola:timestamp;
  rdfs:domain enola:TimeIntervaled.

enola:createdAt a rdf:Property;
  rdfs:subPropertyOf enola:timestamp;
  rdfs:domain enola:File.

enola:modifiedAt a rdf:Property;
  rdfs:subPropertyOf enola:timestamp;
  rdfs:domain enola:File.

enola:deletedAt a rdf:Property;
  rdfs:subPropertyOf enola:timestamp;
  rdfs:domain enola:File.

enola:Hardware a rdfs:Class;
  rdfs:comment "Parent (abstract) Class for 'hard ware', i.e. 'physical computer stuff' - you can touch this!";
  enola:wikipedia "Computer_hardware". # https://en.wikipedia.org/wiki/Computer_hardware

enola:Software a rdfs:Class;
  rdfs:comment "Parent (abstract) Class for 'soft ware', i.e. 'virtual computer stuff' - you can think of but cannot physically touch this.";
  enola:wikipedia "Software". # https://en.wikipedia.org/wiki/Software

enola:SoftwareWithURL a rdfs:Class;
  rdfs:subClassOf enola:Software;
  rdfs:comment "Parent (abstract) Class for a piece of [[Software]] which has a URL that you can type into a web browser to look at (the UI of) it.".

# TODO Fix https://github.com/enola-dev/enola/pull/735 and un-comment this:
# TODO Discuss with someone smart if this is a good idea? Given "Open World" assumption, this seems "fair game" - hopefully?
# schema:url schema:domainIncludes enola:SoftwareWithURL.

enola:emoji a rdf:Property;
  schema:name "Emoji";
  rdfs:range xsd:string;
  schema:description "Emoji üòÉ of a Thing, from Unicode or <a href='https://www.nerdfonts.com'>Nerdfonts</a>.";
  enola:emoji "üòÉ".

enola:labelProperty a rdf:Property;
  schema:name "Label Property";
  rdfs:domain rdfs:Class;
  rdfs:range xsd:anyURI;
  schema:description "The IRI of a property to be used as Label for Things of this Class; see https://docs.enola.dev/concepts/metadata/".

enola:parent a rdf:Property;
  rdfs:range schema:Thing;
  rdfs:comment "A 'hierarchical' parent. This is typically subclassed - and thus there could be several different kinds of parents. Similar to https://schema.org/isPartOf; but that's specific to CreativeWork, while this is not.".

# Similar to https://schema.org/hasPart; but that's specific to CreativeWork, this is not
enola:children a rdf:Property;
  schema:inverseOf enola:parent.

# TODO schema:source?
# TODO Rename origin to origins, because the Statements of one Thing could come from various places.
enola:origin a rdf:Property;
  schema:name "Origin";
  rdfs:range xsd:anyURI;
  schema:description "What something is _\"based on\",_ e.g. where it _\"comes from\"._ This may be a list.";
  enola:emoji "üè∫".

# TODO Split Q & P...
enola:wikidata a rdf:Property;
  # TODO This, and other, images should be a String, not a link, and the UI needs to be coded to handle it... validate!
  schema:image <https://upload.wikimedia.org/wikipedia/commons/f/ff/Wikidata-logo.svg>;
  # https://www.wikidata.org/wiki/Wikidata:Data_access#Linked_Data_Interface_(URI)
  schema:url "http://www.wikidata.org/entity/{VALUE}"^^enola:IRITemplate;
  schema:description "Wikidata Q123 or P123 etc.".
  # TODO Range (?) is a RegExp like [QP][0-9]+ or so...

enola:wikipedia a rdf:Property;
  # TODO This, and other, images should be a String, not a link, and the UI needs to be coded to handle it... validate!
  schema:image <https://upload.wikimedia.org/wikipedia/commons/8/80/Wikipedia-logo-v2.svg>;
  schema:description "Wikipedia EN page ID (not URL), e.g. 'Wikipedia' (for https://en.wikipedia.org/wiki/Wikipedia)";
  schema:url "https://en.wikipedia.org/wiki/{VALUE}"^^enola:IRITemplate.
  # TODO Range (?) is a RegExp like [a-zA-Z0-9_]+ (but without slash or colon!) or whatever it is...

enola:iriTemplate a rdf:Property;
  rdfs:domain rdfs:Class;
  rdfs:range enola:IRITemplate;
  schema:description "Enola creates (infers?) new 'dynamic' Things of any Class with this property when an IRI matches it. All properties of datatype `IRITemplate` of the Class are copied to the new Thing, and any variables are replaced.".

enola:IRITemplate a rdfs:Datatype;
  schema:name "IRI Template";
  rdfs:seeAlso enola:iriTemplate;
  schema:description "IRITemplate is the Datatype for RFC 6570 URI Templates. Used e.g. in an iriTemplate Class property.";
  enola:wikipedia "URI_Template";
  enola:wikidata "2467760";
  enola:rfc "6570";
  enola:gkg "m/05q4zt_";
  enola:emoji "{}".
  # TODO rdfs:range (?) how to?

enola:example a rdf:Property;
  rdfs:domain rdfs:Class;
  schema:description "Link to an example of this Class. Often used together with iriTemplate, but not exclusively.";
  rdfs:seeAlso enola:iriTemplate;
  rdfs:range xsd:anyURI;
  enola:emoji "ü§î".

enola:gkg a rdf:Property;
  rdfs:range enola:GKG.

enola:GKG a rdfs:Datatype;
  schema:name "Google Public Knowledge Graph ID";
  schema:description "ID in Google's Public Knowledge Graph (formerly AKA Freebase), see e.g. https://developers.google.com/knowledge-graph/; starts without slash, but with 'm' or 'g' following by a slash and lower case characters, numbers and underscores; e.g. g/11bwcf511s";
  enola:iriTemplate "kg:/{VALUE}";
  schema:url "https://www.google.com/search?kgmid=/{VALUE}"^^enola:IRITemplate. # TODO https://g.co/kg/g/11bwcf511s ?!
  # TODO Range (?) is a RegExp like "[mg]/[a-z0-9_]+

enola:rfc a rdf:Property;
  rdfs:range xsd:positiveInteger;
  schema:url "https://datatracker.ietf.org/doc/rfc{VALUE}"^^enola:IRITemplate.

enola:seeAlso a rdf:Property;
  rdfs:subPropertyOf rdfs:seeAlso.

enola:content-as-text a rdf:Property;
  rdfs:range xsd:string;
  schema:description "The textual content of e.g. a file, or remote resource, such as PDF, HTML page, EPUB; without any metadata, markup, etc.".
