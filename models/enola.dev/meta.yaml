# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2024 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Meta
id: dev.enola.meta
iri: https://enola.dev/meta
description: Meta is Enola's own schema's Metamodel. It is inspired by RDFS, OWL, LinkML, JSON Schema, et al.
java:package: dev.enola.model.enola.meta

# .imports:
#   enola: common.yaml
#   java: java.yaml

classes:
  Namespace:
    properties:
      prefix: enola:Name
      iri: enola:IRI

  Common:
    properties:
      # TODO Remove String, after imports work
      enola:name: enola:Name
      enola:label: enola:String
      enola:description: enola:String
      enola:emoji: enola:String

  Schema:
    parents: [Common]
    iri_template: https://enola.dev/Schema/{id}
    ids:
      id: enola:Names
    properties:
      java:package:
      datatypes: # Nota Bene, implies iri: https://enola.dev/meta/Vocabulary/datatypes
        type: Datatype*
        # inverse: schema
      prefixes:
        type: Namespace*
        # inverse: schema
      # TODO imports: type: Import*
      # TODO Enum & EnumValue
      properties:
        type: Property*
        # inverse: schema
      classes:
        type: Class*
        # inverse: schema

  Type:
    parents: [Common]
    # ? ids_separator: .
    ids:
      schema: Schema
      name:
    properties: # iri: is implicit!

  Datatype:
    parents: [Type]
    iri_template: https://enola.dev/Datatype/{schema}.{name}
    properties:
      # TODO parent: Datatype
      java:type:
      xsd: enola:IRI

  Enum:
    parents: [Type]
    # ? type: [Datatype]
    iri_template: https://enola.dev/Enum/{schema}.{name}
    properties:
      values: EnumValue*

  EnumValue:
    parents: [Type]
    iri_template: https://enola.dev/EnumValue/{schema}.{name}

  Property:
    parents: [Type]
    iri_template: https://enola.dev/Property/{schema}.{name}
    properties:
      parents: Property*
      datatype: Datatype

  Class:
    parents: [Type]
    iri_template: https://enola.dev/Class/{schema}.{name}
    properties:
      parents: Class*
      iri_template:
      properties: Property*
      ids: Property*
