# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2023-2025 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Nota bene, any shared version numbers defined here should ONLY be
# for Maven versions (of multiple artifacts), and NOT also used in bazel_dep()
# mod versions; because bazel-steward may update the variable but
# not the bazel_dep, or vice versa, leading to inconsistencies (see
# https://github.com/VirtusLab/bazel-steward/issues/404).

RDF4J_VERSION = "5.1.3"

GRPC_JAVA_VERSION = "1.73.0"

# see ./tools/java_toolchain/BUILD
# see https://github.com/bazelbuild/bazel/issues/20877, NB the "_definition" suffix!
register_toolchains("//tools/java_toolchain:repository_default_java_toolchain_definition")

# see https://github.com/bazelbuild/rules_apple/issues/2660
# for https://github.com/enola-dev/enola/issues/1146
bazel_dep(name = "rules_apple", version = "3.22.0", repo_name = "build_bazel_rules_apple")

# see https://github.com/enola-dev/enola/issues/1164
# NO NEED: bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "re2", version = "2024-07-02.bcr.1")
bazel_dep(name = "abseil-cpp", version = "20250127.1")

# https://github.com/protocolbuffers/protobuf/tree/main?tab=readme-ov-file#bazel-with-bzlmod
bazel_dep(name = "protobuf", version = "29.5")

# https://registry.bazel.build/modules/rules_java
bazel_dep(name = "rules_java", version = "8.11.0")

# Required by gRPC
# (from https://github.com/grpc/grpc-java/blob/8c261c3f28c7d83e1e976acfc34b62027078252b/examples/MODULE.bazel#L1)
bazel_dep(name = "googleapis", version = "0.0.0-20241220-5e258e33.bcr.1", repo_name = "com_google_googleapis")
bazel_dep(name = "googleapis-java", version = "1.0.0")

switched_rules = use_extension("@com_google_googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages(java = True)

# https://github.com/grpc/grpc-java/
# https://registry.bazel.build/modules/grpc-java
# TODO Bump grpc-java version to avoid ugly WARNING & DEBUG once https://github.com/grpc/grpc-java/issues/11792
#  and https://github.com/grpc/grpc-java/issues/11791 are fixed (and released).
# NB: Do *NOT* re-use GRPC_JAVA_VERSION here, because of https://github.com/VirtusLab/bazel-steward/issues/404.
bazel_dep(name = "grpc-java", version = "1.71.0", repo_name = "io_grpc_grpc_java")

# https://github.com/bazelbuild/rules_go/blob/master/docs/go/core/bzlmod.md
bazel_dep(name = "rules_go", version = "0.54.1")
bazel_dep(name = "gazelle", version = "0.43.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Do NOT use go_sdk.host(), see https://github.com/enola-dev/enola/issues/713
go_sdk.download(version = "1.22.4")

# https://github.com/bazelbuild/rules_jvm_external/blob/master/docs/bzlmod.md#installation
# When bumping the version here, must always run: REPIN=1 bazelisk run @enola_maven//:pin
bazel_dep(name = "rules_jvm_external", version = "6.7")

enola_maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
enola_maven.install(
    # NB: Do *ALWAYS* specify a name, and NEVER use the (default) name = "maven";
    # this is because it's not "namespaced" (or "scoped") like you might think it
    # really should be... use the default name *WILL* cause conflicts with other modules;
    # notably grpc-java! See e.g. https://github.com/bazel-contrib/rules_jvm_external/issues/916
    # and https://github.com/bazel-contrib/rules_jvm_external/issues/708 for more background.
    name = "enola_maven",
    artifacts = [
        "junit:junit:4.13.2",
        # NB: Using GCP Cloud PubSub is a bit too broad, and could be refined,
        # but it avoids us (TODO) having to figure out exactly which narrower
        # dependencies are required.  This was inspired by the grpc-java examples at
        # https://github.com/grpc/grpc-java/blob/8c261c3f28c7d83e1e976acfc34b62027078252b/examples/MODULE.bazel#L24
        # which should be updated when this will be refined.
        "com.google.api.grpc:grpc-google-cloud-pubsub-v1:1.121.4",
        "com.google.api.grpc:proto-google-cloud-pubsub-v1:1.121.4",
        "com.google.auto.value:auto-value:1.11.0",
        "com.google.auto.service:auto-service:1.1.1",
        "com.google.auto.service:auto-service-annotations:1.1.1",
        "com.google.guava:guava:33.4.0-jre",
        "com.google.jimfs:jimfs:1.3.0",
        "com.google.truth.extensions:truth-java8-extension:1.4.4",
        "com.google.truth.extensions:truth-proto-extension:1.4.4",
        # Protobuf
        "com.google.protobuf:protobuf-java:4.31.1",
        "com.google.protobuf:protobuf-java-util:4.31.1",
        # gRPC
        "io.grpc:grpc-netty:%s" % GRPC_JAVA_VERSION,
        "io.grpc:grpc-stub:%s" % GRPC_JAVA_VERSION,
        "io.grpc:grpc-inprocess:%s" % GRPC_JAVA_VERSION,
        "org.apache.tomcat:annotations-api:6.0.53",  # NOT :tomcat-annotations-api
        # RDF4j <https://rdf4j.org>
        "org.eclipse.rdf4j:rdf4j-common-iterator:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-common-transaction:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-model:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-rio-jsonld:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-rio-turtle:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-repository-sail:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-sail-memory:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-sail-nativerdf:%s" % RDF4J_VERSION,
        "org.eclipse.rdf4j:rdf4j-query:%s" % RDF4J_VERSION,
        # TODO https://rdf4j.org/documentation/programming/lmdb-store/
        #   "org.eclipse.rdf4j:rdf4j-sail-lmdb:%s" % RDF4J_VERSION,
        # TODO Remove jackson-databind when https://github.com/eclipse-rdf4j/rdf4j/issues/4907 Link Bug is fixed!
        "com.fasterxml.jackson.core:jackson-databind:2.19.0",
        # kubernetes:client-java also depends on Protobuf (+gRPC?), version may need to be upgraded together
        "io.kubernetes:client-java:24.0.0",
        # Other
        "ch.vorburger.exec:exec:3.3.2",
        "com.github.java-json-tools:uri-template:0.10",
        "info.picocli:picocli:4.7.7",
        "info.picocli:picocli-shell-jline3:4.7.7",
        "info.picocli:picocli-codegen:4.7.6",
        "org.snakeyaml:snakeyaml-engine:2.9",
        "org.yaml:snakeyaml:2.4",
        "org.slf4j:slf4j-jdk14:2.0.17",
        "org.slf4j:slf4j-simple:2.0.17",
        # Tika (unfortunately!) uses Log4j (v2) instead of SLF4j, so:
        "org.apache.logging.log4j:log4j-to-jul:2.24.3",
        "io.github.classgraph:classgraph:4.8.179",
        "com.google.errorprone:error_prone_annotations:2.38.0",
        "org.jspecify:jspecify:1.0.0",
        "com.squareup.okhttp3:okhttp:4.12.0",
        "com.squareup.okhttp3:logging-interceptor:4.12.0",
        "dev.dirs:directories:26",
        "dev.langchain4j:langchain4j:1.0.0-rc1",
        "dev.langchain4j:langchain4j-ollama:1.0.0-beta4",
        "dev.langchain4j:langchain4j-google-ai-gemini:1.0.0-beta4",
        "io.github.ollama4j:ollama4j:1.0.100",
        "com.github.spotbugs:spotbugs-annotations:4.9.3",
        "io.github.java-diff-utils:java-diff-utils:4.15",
        "org.jsoup:jsoup:1.20.1",
        "org.apache.tika:tika-core:3.0.0-BETA2",
        "org.apache.tika:tika-parsers-standard-package:3.0.0-BETA2",
        "com.github.package-url:packageurl-java:1.5.0",

        # Maven Connector
        "eu.maveniverse.maven.mima.runtime:standalone-static:2.4.26",
        "eu.maveniverse.maven.mima:context:2.4.26",
        "eu.maveniverse.maven.mima.extensions:mmr:2.4.26",
        "org.apache.maven.resolver:maven-resolver-api:2.0.9",
        "org.apache.maven.resolver:maven-resolver-util:2.0.9",
        "org.apache.maven:maven-model:3.9.9",
        "org.codehaus.plexus:plexus-xml:4.1.0",

        # IPFS & IPLD etc.
        "com.github.ipld:java-cid:1.3.8",
        "com.github.ipfs:java-ipfs-http-client:d982fc0fa1",
        "com.github.multiformats:java-multibase:03702505e959cafbebfcf7990848ee124017c27d",
        "com.github.multiformats:java-multihash:d238c77f11a0ff33970ad43578ae11f049324848",

        # TODO Use finer-grained individual JARs?
        # TODO Support MS Windows? See https://github.com/jline/jline3#artifacts.
        "org.jline:jline:3.30.4",

        # https://github.com/JetBrains/pty4j
        "org.jetbrains.pty4j:pty4j:0.13.4",

        # SLF4j Logging Testing alternatives considered:
        #   - https://github.com/Hakky54/log-captor
        #   - https://github.com/portingle/slf4jtesting
        #   - https://www.spf4j.org/spf4j-slf4j-test/
        "com.github.valfirst:slf4j-test:3.0.1",

        # TODO Use sshd-netty? See https://github.com/apache/mina-sshd/blob/master/docs/dependencies.md#netty
        "org.apache.sshd:sshd-core:2.15.0",
        "de.swiesend:secret-service:2.0.1-alpha",
        # TODO https://github.com/swiesend/secret-service/issues/51
        # "org.purejava:kdewallet:1.6.0",

        # https://google.github.io/adk-docs/get-started/installation/
        "com.google.adk:google-adk:0.1.0",
        "com.google.adk:google-adk-dev:0.1.0",
    ],
    # NB: Never de-activate duplicate_version_warning = "error"!
    # While it can be tempting to resolve a build-time problem which
    # may have occurred when changing dependencies, it will only cause
    # runtime problems due to "classpath hell" later; it's ALWAYS better
    # to clean versions at build time!
    duplicate_version_warning = "error",
    excluded_artifacts = [
        # Thanks, but No Thanks! (Spring Boot drags this along, with ADK.)
        "ch.qos.logback:logback-core",
        "ch.qos.logback:logback-classic",

        # List e.g. "com.github.multiformats:java-multihash" etc. here
        #   if using "com.github.vorburger:*" instead above, for unmerged patched versions.

        # https://commons.apache.org/proper/commons-logging/ is a PITA,
        # because it contains package org.apache.commons.logging, which we
        # already get from org.slf4j:jcl-over-slf4j, see https://www.slf4j.org/legacy.html
        "commons-logging:commons-logging",

        # ROME Utils classes appear to also be included in com.rometools:rome - at least via Tika.
        "com.rometools:rome-utils",
    ],
    fail_if_repin_required = True,
    fetch_sources = True,
    lock_file = "//:maven_install.json",
    repositories = [
        # Override legacy default https://repo1.maven.org/maven2/
        "https://repo.maven.apache.org/maven2/",
        # Used by Multiformats, IPFS & IPLD
        "https://jitpack.io",
    ],
)
use_repo(enola_maven, "enola_maven")

# https://github.com/sgammon/rules_graalvm
# TODO https://github.com/sgammon/rules_graalvm/issues/401
# TODO https://github.com/sgammon/rules_graalvm/issues/556
# TODO https://github.com/sgammon/rules_graalvm/issues/555

bazel_dep(name = "rules_graalvm", version = "0.11.1")

gvm = use_extension("@rules_graalvm//:extensions.bzl", "graalvm")
gvm.graalvm(
    name = "graalvm",
    distribution = "ce",  # `oracle`, `ce`, or `community`
    java_version = "21",  # `17`, `20`, `22`, `23`, etc.
    version = "21.0.2",  # pass graalvm or specific jdk version supported by gvm
)
use_repo(gvm, "graalvm")

register_toolchains("@graalvm//:jvm")

register_toolchains("@graalvm//:sdk")
