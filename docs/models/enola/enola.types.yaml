# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2023-2024 The Enola <https://enola.dev> Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NB: schemas/Type.schema.json et al are generated by tools/protoc.bash!

# TODO Move this into .vscode/settings.json
# (once https://docs.enola.dev/json-schema/enola_meta.schema.jsonc is published)
# yaml-language-server: $schema=schemas/Types.schema.json

# TODO Support "flat" YAML with "multiple documents" using ‚Äú---‚Äù separators. This requires:
#
# 1. https://github.com/redhat-developer/vscode-yaml/issues/995,
#    with https://github.com/redhat-developer/yaml-language-server/issues/946;
#
# 2. https://github.com/python-jsonschema/check-jsonschema/issues/222;
#
# 3. Enola reader support for it, for Rosetta et al;
#    just make `ProtoIO.read()` return a List<> instead.

# TODO Declare (or import?) the "fundamental" types here, first...
# Nothing, Unknown, Boolean, String, Text, etc.

types:
  - name: enola.dev/url
    doc: enola.md#URL
    emoji: üîó
    labels:
      en: URL
    string:

  - name: enola.dev/id
    doc: enola.md#ID
    emoji: üÜî
    labels:
      en: Enola (binary) ID
    binary:
    java: dev.enola.core.ByteSeq

  - name: enola.dev/gun
    doc: enola.md#GUN
    labels:
      en: Globally Unique Name (GUN)
    string:

  - name: enola.dev/email
    doc: enola.md#Email
    emoji: üìß
    labels:
      en: Email Address
      de: Email Adresse
      de-CH: E-Mail Adresse
    string:
    properties:
      email:
      mailto:
        link: mailto:{email}
      gmail-from:
        # TODO Test encoding! The @ has to be %40 encoded...
        link: https://mail.google.com/mail/u/0/#search/from%3A{email}
      gmail-to:
        link: https://mail.google.com/mail/u/0/#search/to%3A{email}

  - name: enola.dev/mls
    doc: enola.md#MLS
    emoji: üåê
    labels:
      en: Multi-language Strings
    # TODO schema? It's a map<string, string> .. but do we HAVE to specify a schema? For what??

  - name: enola.dev/proto
    doc: enola.md#Proto
    emoji: üóúÔ∏è
    labels:
      en: Protocol Buffer Message
    string:
    properties:
      enola:
        link: enola:enola.dev/proto/{fqn}
