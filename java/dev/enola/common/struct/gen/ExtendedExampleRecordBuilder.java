/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2025 The Enola <https://enola.dev> Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Auto generated by io.soabase.recordbuilder.core.RecordBuilder:
// https://github.com/Randgalt/record-builder
package dev.enola.common.struct.gen;

import dev.enola.common.struct.CustomDatatype;
import dev.enola.common.struct.Example;

import java.math.BigDecimal;
import java.net.URI;
import java.time.Instant;
import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Stream;

import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class ExtendedExampleRecordBuilder {
    private CustomDatatype customDatatype;

    private BigDecimal bigDecimal;

    private URI url;

    private String text;

    private Integer number;

    private Instant instant;

    private Example example;

    private List<Example> examplesInOrder;

    private Set<Example> examplesBag;

    private Map<String, Example> map;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private ExtendedExampleRecordBuilder() {}

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private ExtendedExampleRecordBuilder(
            CustomDatatype customDatatype,
            BigDecimal bigDecimal,
            URI url,
            String text,
            Integer number,
            Instant instant,
            Example example,
            List<Example> examplesInOrder,
            Set<Example> examplesBag,
            Map<String, Example> map) {
        this.customDatatype = customDatatype;
        this.bigDecimal = bigDecimal;
        this.url = url;
        this.text = text;
        this.number = number;
        this.instant = instant;
        this.example = example;
        this.examplesInOrder = examplesInOrder;
        this.examplesBag = examplesBag;
        this.map = map;
    }

    /** Static constructor/builder. Can be used instead of new ExtendedExampleRecord(...) */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static ExtendedExampleRecord ExtendedExampleRecord(
            CustomDatatype customDatatype,
            BigDecimal bigDecimal,
            URI url,
            String text,
            Integer number,
            Instant instant,
            Example example,
            List<Example> examplesInOrder,
            Set<Example> examplesBag,
            Map<String, Example> map) {
        return new ExtendedExampleRecord(
                customDatatype,
                bigDecimal,
                url,
                text,
                number,
                instant,
                example,
                examplesInOrder,
                examplesBag,
                map);
    }

    /** Return a new builder with all fields set to default Java values */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static ExtendedExampleRecordBuilder builder() {
        return new ExtendedExampleRecordBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static ExtendedExampleRecordBuilder builder(ExtendedExampleRecord from) {
        return new ExtendedExampleRecordBuilder(
                from.customDatatype(),
                from.bigDecimal(),
                from.url(),
                from.text(),
                from.number(),
                from.instant(),
                from.example(),
                from.examplesInOrder(),
                from.examplesBag(),
                from.map());
    }

    /** Return a "with"er for an existing record instance */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static ExtendedExampleRecordBuilder.With from(ExtendedExampleRecord from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the
     * value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(ExtendedExampleRecord record) {
        return Stream.of(
                new AbstractMap.SimpleImmutableEntry<>("customDatatype", record.customDatatype()),
                new AbstractMap.SimpleImmutableEntry<>("bigDecimal", record.bigDecimal()),
                new AbstractMap.SimpleImmutableEntry<>("url", record.url()),
                new AbstractMap.SimpleImmutableEntry<>("text", record.text()),
                new AbstractMap.SimpleImmutableEntry<>("number", record.number()),
                new AbstractMap.SimpleImmutableEntry<>("instant", record.instant()),
                new AbstractMap.SimpleImmutableEntry<>("example", record.example()),
                new AbstractMap.SimpleImmutableEntry<>("examplesInOrder", record.examplesInOrder()),
                new AbstractMap.SimpleImmutableEntry<>("examplesBag", record.examplesBag()),
                new AbstractMap.SimpleImmutableEntry<>("map", record.map()));
    }

    /** Return a new record instance with all fields set to the current values in this builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecord build() {
        return new ExtendedExampleRecord(
                customDatatype,
                bigDecimal,
                url,
                text,
                number,
                instant,
                example,
                examplesInOrder,
                examplesBag,
                map);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "ExtendedExampleRecordBuilder[customDatatype="
                + customDatatype
                + ", bigDecimal="
                + bigDecimal
                + ", url="
                + url
                + ", text="
                + text
                + ", number="
                + number
                + ", instant="
                + instant
                + ", example="
                + example
                + ", examplesInOrder="
                + examplesInOrder
                + ", examplesBag="
                + examplesBag
                + ", map="
                + map
                + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(
                customDatatype,
                bigDecimal,
                url,
                text,
                number,
                instant,
                example,
                examplesInOrder,
                examplesBag,
                map);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o)
                || ((o instanceof ExtendedExampleRecordBuilder r)
                        && Objects.equals(customDatatype, r.customDatatype)
                        && Objects.equals(bigDecimal, r.bigDecimal)
                        && Objects.equals(url, r.url)
                        && Objects.equals(text, r.text)
                        && Objects.equals(number, r.number)
                        && Objects.equals(instant, r.instant)
                        && Objects.equals(example, r.example)
                        && Objects.equals(examplesInOrder, r.examplesInOrder)
                        && Objects.equals(examplesBag, r.examplesBag)
                        && Objects.equals(map, r.map));
    }

    /** Set a new value for the {@code customDatatype} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder customDatatype(CustomDatatype customDatatype) {
        this.customDatatype = customDatatype;
        return this;
    }

    /** Return the current value for the {@code customDatatype} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CustomDatatype customDatatype() {
        return customDatatype;
    }

    /** Set a new value for the {@code bigDecimal} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder bigDecimal(BigDecimal bigDecimal) {
        this.bigDecimal = bigDecimal;
        return this;
    }

    /** Return the current value for the {@code bigDecimal} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public BigDecimal bigDecimal() {
        return bigDecimal;
    }

    /** Set a new value for the {@code url} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder url(URI url) {
        this.url = url;
        return this;
    }

    /** Return the current value for the {@code url} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public URI url() {
        return url;
    }

    /** Set a new value for the {@code text} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder text(String text) {
        this.text = text;
        return this;
    }

    /** Return the current value for the {@code text} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String text() {
        return text;
    }

    /** Set a new value for the {@code number} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder number(Integer number) {
        this.number = number;
        return this;
    }

    /** Return the current value for the {@code number} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public Integer number() {
        return number;
    }

    /** Set a new value for the {@code instant} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder instant(Instant instant) {
        this.instant = instant;
        return this;
    }

    /** Return the current value for the {@code instant} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public Instant instant() {
        return instant;
    }

    /** Set a new value for the {@code example} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder example(Example example) {
        this.example = example;
        return this;
    }

    /** Return the current value for the {@code example} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public Example example() {
        return example;
    }

    /** Set a new value for the {@code examplesInOrder} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder examplesInOrder(List<Example> examplesInOrder) {
        this.examplesInOrder = examplesInOrder;
        return this;
    }

    /** Return the current value for the {@code examplesInOrder} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public List<Example> examplesInOrder() {
        return examplesInOrder;
    }

    /** Set a new value for the {@code examplesBag} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder examplesBag(Set<Example> examplesBag) {
        this.examplesBag = examplesBag;
        return this;
    }

    /** Return the current value for the {@code examplesBag} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public Set<Example> examplesBag() {
        return examplesBag;
    }

    /** Set a new value for the {@code map} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public ExtendedExampleRecordBuilder map(Map<String, Example> map) {
        this.map = map;
        return this;
    }

    /** Return the current value for the {@code map} record component in the builder */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public Map<String, Example> map() {
        return map;
    }

    /** Add withers to {@code ExtendedExampleRecord} */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code customDatatype} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        CustomDatatype customDatatype();

        /** Return the current value for the {@code bigDecimal} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        BigDecimal bigDecimal();

        /** Return the current value for the {@code url} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        URI url();

        /** Return the current value for the {@code text} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String text();

        /** Return the current value for the {@code number} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        Integer number();

        /** Return the current value for the {@code instant} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        Instant instant();

        /** Return the current value for the {@code example} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        Example example();

        /**
         * Return the current value for the {@code examplesInOrder} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        List<Example> examplesInOrder();

        /** Return the current value for the {@code examplesBag} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        Set<Example> examplesBag();

        /** Return the current value for the {@code map} record component in the builder */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        Map<String, Example> map();

        /** Return a new record builder using the current values */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecordBuilder with() {
            return new ExtendedExampleRecordBuilder(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /** Return a new record built from the builder passed to the given consumer */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord with(Consumer<ExtendedExampleRecordBuilder> consumer) {
            ExtendedExampleRecordBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * customDatatype}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withCustomDatatype(CustomDatatype customDatatype) {
            return new ExtendedExampleRecord(
                    customDatatype,
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * bigDecimal}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withBigDecimal(BigDecimal bigDecimal) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal,
                    url(),
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code url}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withUrl(URI url) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url,
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code text}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withText(String text) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text,
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * number}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withNumber(Integer number) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number,
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * instant}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withInstant(Instant instant) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant,
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * example}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withExample(Example example) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant(),
                    example,
                    examplesInOrder(),
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * examplesInOrder}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withExamplesInOrder(List<Example> examplesInOrder) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder,
                    examplesBag(),
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code
         * examplesBag}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withExamplesBag(Set<Example> examplesBag) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag,
                    map());
        }

        /**
         * Return a new instance of {@code ExtendedExampleRecord} with a new value for {@code map}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default ExtendedExampleRecord withMap(Map<String, Example> map) {
            return new ExtendedExampleRecord(
                    customDatatype(),
                    bigDecimal(),
                    url(),
                    text(),
                    number(),
                    instant(),
                    example(),
                    examplesInOrder(),
                    examplesBag(),
                    map);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements ExtendedExampleRecordBuilder.With {
        private final ExtendedExampleRecord from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(ExtendedExampleRecord from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public CustomDatatype customDatatype() {
            return from.customDatatype();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public BigDecimal bigDecimal() {
            return from.bigDecimal();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public URI url() {
            return from.url();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String text() {
            return from.text();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public Integer number() {
            return from.number();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public Instant instant() {
            return from.instant();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public Example example() {
            return from.example();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public List<Example> examplesInOrder() {
            return from.examplesInOrder();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public Set<Example> examplesBag() {
            return from.examplesBag();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public Map<String, Example> map() {
            return from.map();
        }
    }
}
