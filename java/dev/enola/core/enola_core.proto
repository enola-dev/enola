// SPDX-License-Identifier: Apache-2.0
//
// Copyright 2023-2024 The Enola <https://enola.dev> Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dev.enola.core;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
// import "java/dev/enola/core/enola_ext.proto";
import "java/dev/enola/thing/thing.proto";

option java_string_check_utf8 = true;
option java_package = "dev.enola.core.proto";
option java_multiple_files = true;
option go_package = "dev/enola/core";

message GetThingRequest {
  // IRI of Thing to get. This may use an enola: scheme, see
  // https://docs.enola.dev/concepts/uri.
  string iri = 1;
}

message GetThingResponse {
  // TODO Remove Any support by replacing this GetThingsResponse
  google.protobuf.Any thing = 1;
}

message GetThingsRequest {
  // IRI of a Thing to get, or query for Things; e.g.
  // https://enola.dev/query/all?inline=true&limit=7, or sparql: or sql:
  // something else like that.
  string iri = 1;
}

message GetThingsResponse {
  repeated dev.enola.thing.Thing things = 1;
}

message GetFileDescriptorSetRequest {
  // Intentionally empty (currently).
}

message GetFileDescriptorSetResponse {
  google.protobuf.FileDescriptorSet protos = 1;
}

// TODO rpc watch(), for a time series WatchRequest/Response with *N Things?
//   google.protobuf.Timestamp ts = 2;
//   google.protobuf.Timestamp start = 2;
//   google.protobuf.Timestamp end = 3;
//   google.protobuf.Duration granularity = 4;

// This is the API with which Enola clients (such as a CLI or UI) connect.
service EnolaService {
  rpc GetFileDescriptorSet(GetFileDescriptorSetRequest)
      returns (GetFileDescriptorSetResponse) {}
  rpc GetThing(GetThingRequest) returns (/* TODO stream */ GetThingResponse) {}
  rpc GetThings(GetThingsRequest)
      returns (/* TODO stream */ GetThingsResponse) {}
}
